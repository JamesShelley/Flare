@page "/"
@using BitcoinBlazor.Services
@using BitcoinBlazor.Data
@inject IBitcoinService service
@inject IJSRuntime jsRuntime

<h1>
    Bitcoin Address List -     <input type="button" data-toggle="modal" data-target="#addressModal" class="btn btn-primary" value="Add Address" />
</h1>

<p>
    Below are all of your Bitcoin Network Addresses associated with your Bitcoin Public Key. You should have already backed up your Bitcoin Private key
    and seed words as these are not stored for your privacy.
</p>

@if (BitcoinAddressList == null)
{
    <p><em>Loading...</em></p>
}
else if (BitcoinAddressList.Count == 0)
{
    <div class="alert alert-info" role="alert">
        You currently do not have any Bitcoin Addresses.
    </div>
}
else
{

    <div class="row">
        @foreach (var address in BitcoinAddressList)
        {
            <div class="col-md-6">

                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Address Nickname: @address.AddressNickname</h5>
                        <h6 class="card-subtitle mb-2 text-muted">[Value]</h6>
                        <p class="card-text">
                            <ul>
                                <li>
                                    Public Key: @address.BitcoinPublicKey
                                </li>
                                <li>
                                    Legacy Bitcoin TestNet: @address.LegacyBitcoinTestNetAddress
                                </li>
                                <li>
                                    Legacy Bitcoin MainNet: @address.LegacyBitcoinMainNetAddress
                                </li>
                                <li>
                                    SegWit Bitcoin TestNet: @address.SegWitBitcoinTestNetAddress
                                </li>
                                <li>
                                    SegWit Bitcoin MainNet: @address.SegWitBitcoinMainNetAddress
                                </li>
                                <li>
                                    SegWitP2SH Bitcoin TestNet: @address.SegWitP2SHBitcoinTestNetAddress
                                </li>
                                <li>
                                    SegWitP2SH Bitcoin MainNet:@address.SegWitP2SHBitcoinMainNetAddress
                                </li>
                            </ul>

                        </p>
                        <a href="#" class="btn btn-success" data-toggle="modal" data-target="#addressModal" @onclick="(() => PrepareForEdit(address))">Edit</a>
                        <a href="#" class="btn btn-danger" data-toggle="modal" data-target="#confirmDeleteModal" @onclick="(() => PrepareForDelete(address))">Delete</a>
                    </div>
                </div>
            </div>
        }
    </div>


}

<ConfirmDialog OnClick="@Delete" />
<AddressDetail AddressObject=addressObject DataChanged="@DataChanged">
    <CustomHeader>@customHeader</CustomHeader>
</AddressDetail>


@code {
    List<BitcoinBlazor.Data.DataModels.UserBitcoinAddress> BitcoinAddressList;

    BitcoinBlazor.Data.DataModels.UserBitcoinAddress addressObject = new Data.DataModels.UserBitcoinAddress();
    string customHeader = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        BitcoinAddressList = await service.GetAddresses();
    }

    private void InitializeTaskObject()
    {
        addressObject = new BitcoinBlazor.Data.DataModels.UserBitcoinAddress();
        customHeader = "Add Bitcoin Address";
    }

    private async void DataChanged()
    {
        BitcoinAddressList = await service.GetAddresses();
        StateHasChanged();
    }

    private void PrepareForEdit(BitcoinBlazor.Data.DataModels.UserBitcoinAddress address)
    {
        customHeader = "Edit Bitcoin Address";
        addressObject = address;
    }

    private void PrepareForDelete(BitcoinBlazor.Data.DataModels.UserBitcoinAddress address)
    {
        addressObject = address;
    }

    private async Task Delete()
    {
        var address = await service.Delete(addressObject.Id);
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        BitcoinAddressList = await service.GetAddresses();
        addressObject = new Data.DataModels.UserBitcoinAddress();
    }
}
